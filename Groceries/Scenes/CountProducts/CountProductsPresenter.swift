//
//  CountProductsPresenter.swift
//  Groceries
//
//  Created by Juan Giannuzzo on 2/15/17.
//  Copyright (c) 2017 me. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol CountProductsPresenterInput
{
  func presentFetchedGroceryItems(response: CountProducts.Something.Response)
}

protocol CountProductsPresenterOutput: class
{
  func displayFetchedGroceryItems(viewModel: CountProducts.Something.ViewModel)
}

class CountProductsPresenter: CountProductsPresenterInput
{
  weak var output: CountProductsPresenterOutput!
  
  // MARK: - Presentation logic
  
  func presentFetchedGroceryItems(response: CountProducts.Something.Response)
  {
    var reducedList:[GroceryItem] = []
    for item in response.items {
      if let i = reducedList.index(of: item) {
        reducedList[i].baskets = (reducedList[i].baskets ?? []) + (item.baskets ?? [])
      }else{
        reducedList.append(item)
      }
    }
    let items = reducedList.map{ item -> String in
      let basketCount = item.baskets?.count ?? 0
      let basketSum = item.baskets?.reduce(0, +) ?? 0
      return "A total of \(basketSum) \(item.name ?? "") where sold in \(basketCount) baskets"
    }
    let viewModel = CountProducts.Something.ViewModel(displayedGroceries: items)
    output.displayFetchedGroceryItems(viewModel: viewModel)
  }
}
